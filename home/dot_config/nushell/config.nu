# Nushell Config File

use std *

$env.config = {
    show_banner: false

    rm: {
        # always put in trash (e.g., Recycle Bin)
        always_trash: true
    }

    edit_mode: vi
}

alias code = code-insiders
alias cz = chezmoi

$env.config.buffer_editor = "code-insiders"
$env.EDITOR = "code-insiders"
$env.VISUAL = "code-insiders"

# LS_COLORS of the [ayu](https://github.com/ayu-theme) theme
#
# Generated by [vivid](https://github.com/sharkdp/vivid) with command:
#   vivid generate ayu
#
# While this command could be run at each startup, hard-coding it here
# removes a dependency, especially on something that is unlikely to change.
$env.LS_COLORS = "*~=0;38;2;170;170;170:bd=0;38;2;0;0;0;48;2;237;102;106:ca=0:cd=0;38;2;0;0;0;48;2;134;179;0:di=0;38;2;27;125;196:do=0;38;2;0;0;0;48;2;240;113;113:ex=1;38;2;237;102;106:fi=0:ln=0;38;2;240;113;113:mh=0:mi=0;38;2;0;0;0;48;2;237;102;106:no=0:or=0;38;2;0;0;0;48;2;237;102;106:ow=0:pi=0;38;2;0;0;0;48;2;27;125;196:rs=0:sg=0:so=0;38;2;0;0;0;48;2;240;113;113:st=0:su=0:tw=0:*.a=1;38;2;237;102;106:*.c=0;38;2;49;136;102:*.d=0;38;2;49;136;102:*.h=0;38;2;49;136;102:*.m=0;38;2;49;136;102:*.o=0;38;2;170;170;170:*.p=0;38;2;49;136;102:*.r=0;38;2;49;136;102:*.t=0;38;2;49;136;102:*.z=4;38;2;134;179;0:*.7z=4;38;2;134;179;0:*.as=0;38;2;49;136;102:*.bc=0;38;2;170;170;170:*.bz=4;38;2;134;179;0:*.cc=0;38;2;49;136;102:*.cp=0;38;2;49;136;102:*.cr=0;38;2;49;136;102:*.cs=0;38;2;49;136;102:*.di=0;38;2;49;136;102:*.el=0;38;2;49;136;102:*.ex=0;38;2;49;136;102:*.fs=0;38;2;49;136;102:*.go=0;38;2;49;136;102:*.gv=0;38;2;49;136;102:*.gz=4;38;2;134;179;0:*.hh=0;38;2;49;136;102:*.hi=0;38;2;170;170;170:*.hs=0;38;2;49;136;102:*.jl=0;38;2;49;136;102:*.js=0;38;2;49;136;102:*.ko=1;38;2;237;102;106:*.kt=0;38;2;49;136;102:*.la=0;38;2;170;170;170:*.ll=0;38;2;49;136;102:*.lo=0;38;2;170;170;170:*.md=0;38;2;237;147;102:*.ml=0;38;2;49;136;102:*.mn=0;38;2;49;136;102:*.nb=0;38;2;49;136;102:*.pl=0;38;2;49;136;102:*.pm=0;38;2;49;136;102:*.pp=0;38;2;49;136;102:*.ps=0;38;2;237;102;106:*.py=0;38;2;49;136;102:*.rb=0;38;2;49;136;102:*.rm=0;38;2;240;113;113:*.rs=0;38;2;49;136;102:*.sh=0;38;2;49;136;102:*.so=1;38;2;237;102;106:*.td=0;38;2;49;136;102:*.ts=0;38;2;49;136;102:*.ui=0;38;2;237;147;102:*.vb=0;38;2;49;136;102:*.wv=0;38;2;240;113;113:*.xz=4;38;2;134;179;0:*.aif=0;38;2;240;113;113:*.ape=0;38;2;240;113;113:*.apk=4;38;2;134;179;0:*.arj=4;38;2;134;179;0:*.asa=0;38;2;49;136;102:*.aux=0;38;2;170;170;170:*.avi=0;38;2;240;113;113:*.awk=0;38;2;49;136;102:*.bag=4;38;2;134;179;0:*.bak=0;38;2;170;170;170:*.bat=1;38;2;237;102;106:*.bbl=0;38;2;170;170;170:*.bcf=0;38;2;170;170;170:*.bib=0;38;2;237;147;102:*.bin=4;38;2;134;179;0:*.blg=0;38;2;170;170;170:*.bmp=0;38;2;240;113;113:*.bsh=0;38;2;49;136;102:*.bst=0;38;2;237;147;102:*.bz2=4;38;2;134;179;0:*.c++=0;38;2;49;136;102:*.cfg=0;38;2;237;147;102:*.cgi=0;38;2;49;136;102:*.clj=0;38;2;49;136;102:*.com=1;38;2;237;102;106:*.cpp=0;38;2;49;136;102:*.css=0;38;2;49;136;102:*.csv=0;38;2;237;147;102:*.csx=0;38;2;49;136;102:*.cxx=0;38;2;49;136;102:*.deb=4;38;2;134;179;0:*.def=0;38;2;49;136;102:*.dll=1;38;2;237;102;106:*.dmg=4;38;2;134;179;0:*.doc=0;38;2;237;102;106:*.dot=0;38;2;49;136;102:*.dox=0;38;2;154;232;69:*.dpr=0;38;2;49;136;102:*.elc=0;38;2;49;136;102:*.elm=0;38;2;49;136;102:*.epp=0;38;2;49;136;102:*.eps=0;38;2;240;113;113:*.erl=0;38;2;49;136;102:*.exe=1;38;2;237;102;106:*.exs=0;38;2;49;136;102:*.fls=0;38;2;170;170;170:*.flv=0;38;2;240;113;113:*.fnt=0;38;2;240;113;113:*.fon=0;38;2;240;113;113:*.fsi=0;38;2;49;136;102:*.fsx=0;38;2;49;136;102:*.gif=0;38;2;240;113;113:*.git=0;38;2;170;170;170:*.gvy=0;38;2;49;136;102:*.h++=0;38;2;49;136;102:*.hpp=0;38;2;49;136;102:*.htc=0;38;2;49;136;102:*.htm=0;38;2;237;147;102:*.hxx=0;38;2;49;136;102:*.ico=0;38;2;240;113;113:*.ics=0;38;2;237;102;106:*.idx=0;38;2;170;170;170:*.ilg=0;38;2;170;170;170:*.img=4;38;2;134;179;0:*.inc=0;38;2;49;136;102:*.ind=0;38;2;170;170;170:*.ini=0;38;2;237;147;102:*.inl=0;38;2;49;136;102:*.ipp=0;38;2;49;136;102:*.iso=4;38;2;134;179;0:*.jar=4;38;2;134;179;0:*.jpg=0;38;2;240;113;113:*.kex=0;38;2;237;102;106:*.kts=0;38;2;49;136;102:*.log=0;38;2;170;170;170:*.ltx=0;38;2;49;136;102:*.lua=0;38;2;49;136;102:*.m3u=0;38;2;240;113;113:*.m4a=0;38;2;240;113;113:*.m4v=0;38;2;240;113;113:*.mid=0;38;2;240;113;113:*.mir=0;38;2;49;136;102:*.mkv=0;38;2;240;113;113:*.mli=0;38;2;49;136;102:*.mov=0;38;2;240;113;113:*.mp3=0;38;2;240;113;113:*.mp4=0;38;2;240;113;113:*.mpg=0;38;2;240;113;113:*.nix=0;38;2;237;147;102:*.odp=0;38;2;237;102;106:*.ods=0;38;2;237;102;106:*.odt=0;38;2;237;102;106:*.ogg=0;38;2;240;113;113:*.org=0;38;2;237;147;102:*.otf=0;38;2;240;113;113:*.out=0;38;2;170;170;170:*.pas=0;38;2;49;136;102:*.pbm=0;38;2;240;113;113:*.pdf=0;38;2;237;102;106:*.pgm=0;38;2;240;113;113:*.php=0;38;2;49;136;102:*.pid=0;38;2;170;170;170:*.pkg=4;38;2;134;179;0:*.png=0;38;2;240;113;113:*.pod=0;38;2;49;136;102:*.ppm=0;38;2;240;113;113:*.pps=0;38;2;237;102;106:*.ppt=0;38;2;237;102;106:*.pro=0;38;2;154;232;69:*.ps1=0;38;2;49;136;102:*.psd=0;38;2;240;113;113:*.pyc=0;38;2;170;170;170:*.pyd=0;38;2;170;170;170:*.pyo=0;38;2;170;170;170:*.rar=4;38;2;134;179;0:*.rpm=4;38;2;134;179;0:*.rst=0;38;2;237;147;102:*.rtf=0;38;2;237;102;106:*.sbt=0;38;2;49;136;102:*.sql=0;38;2;49;136;102:*.sty=0;38;2;170;170;170:*.svg=0;38;2;240;113;113:*.swf=0;38;2;240;113;113:*.swp=0;38;2;170;170;170:*.sxi=0;38;2;237;102;106:*.sxw=0;38;2;237;102;106:*.tar=4;38;2;134;179;0:*.tbz=4;38;2;134;179;0:*.tcl=0;38;2;49;136;102:*.tex=0;38;2;49;136;102:*.tgz=4;38;2;134;179;0:*.tif=0;38;2;240;113;113:*.tml=0;38;2;237;147;102:*.tmp=0;38;2;170;170;170:*.toc=0;38;2;170;170;170:*.tsx=0;38;2;49;136;102:*.ttf=0;38;2;240;113;113:*.txt=0;38;2;237;147;102:*.vcd=4;38;2;134;179;0:*.vim=0;38;2;49;136;102:*.vob=0;38;2;240;113;113:*.wav=0;38;2;240;113;113:*.wma=0;38;2;240;113;113:*.wmv=0;38;2;240;113;113:*.xcf=0;38;2;240;113;113:*.xlr=0;38;2;237;102;106:*.xls=0;38;2;237;102;106:*.xml=0;38;2;237;147;102:*.xmp=0;38;2;237;147;102:*.yml=0;38;2;237;147;102:*.zip=4;38;2;134;179;0:*.zsh=0;38;2;49;136;102:*.zst=4;38;2;134;179;0:*TODO=1:*hgrc=0;38;2;154;232;69:*.bash=0;38;2;49;136;102:*.conf=0;38;2;237;147;102:*.dart=0;38;2;49;136;102:*.diff=0;38;2;49;136;102:*.docx=0;38;2;237;102;106:*.epub=0;38;2;237;102;106:*.fish=0;38;2;49;136;102:*.flac=0;38;2;240;113;113:*.h264=0;38;2;240;113;113:*.hgrc=0;38;2;154;232;69:*.html=0;38;2;237;147;102:*.java=0;38;2;49;136;102:*.jpeg=0;38;2;240;113;113:*.json=0;38;2;237;147;102:*.less=0;38;2;49;136;102:*.lisp=0;38;2;49;136;102:*.lock=0;38;2;170;170;170:*.make=0;38;2;154;232;69:*.mpeg=0;38;2;240;113;113:*.opus=0;38;2;240;113;113:*.orig=0;38;2;170;170;170:*.pptx=0;38;2;237;102;106:*.psd1=0;38;2;49;136;102:*.psm1=0;38;2;49;136;102:*.purs=0;38;2;49;136;102:*.rlib=0;38;2;170;170;170:*.sass=0;38;2;49;136;102:*.scss=0;38;2;49;136;102:*.tbz2=4;38;2;134;179;0:*.tiff=0;38;2;240;113;113:*.toml=0;38;2;237;147;102:*.webm=0;38;2;240;113;113:*.webp=0;38;2;240;113;113:*.woff=0;38;2;240;113;113:*.xbps=4;38;2;134;179;0:*.xlsx=0;38;2;237;102;106:*.yaml=0;38;2;237;147;102:*.cabal=0;38;2;49;136;102:*.cache=0;38;2;170;170;170:*.class=0;38;2;170;170;170:*.cmake=0;38;2;154;232;69:*.dyn_o=0;38;2;170;170;170:*.ipynb=0;38;2;49;136;102:*.mdown=0;38;2;237;147;102:*.patch=0;38;2;49;136;102:*.scala=0;38;2;49;136;102:*.shtml=0;38;2;237;147;102:*.swift=0;38;2;49;136;102:*.toast=4;38;2;134;179;0:*.xhtml=0;38;2;237;147;102:*README=0;38;2;0;0;0;48;2;237;147;102:*passwd=0;38;2;237;147;102:*shadow=0;38;2;237;147;102:*.config=0;38;2;237;147;102:*.dyn_hi=0;38;2;170;170;170:*.flake8=0;38;2;154;232;69:*.gradle=0;38;2;49;136;102:*.groovy=0;38;2;49;136;102:*.ignore=0;38;2;154;232;69:*.matlab=0;38;2;49;136;102:*COPYING=0;38;2;102;102;102:*INSTALL=0;38;2;0;0;0;48;2;237;147;102:*LICENSE=0;38;2;102;102;102:*TODO.md=1:*.desktop=0;38;2;237;147;102:*.gemspec=0;38;2;154;232;69:*Doxyfile=0;38;2;154;232;69:*Makefile=0;38;2;154;232;69:*TODO.txt=1:*setup.py=0;38;2;154;232;69:*.DS_Store=0;38;2;170;170;170:*.cmake.in=0;38;2;154;232;69:*.fdignore=0;38;2;154;232;69:*.kdevelop=0;38;2;154;232;69:*.markdown=0;38;2;237;147;102:*.rgignore=0;38;2;154;232;69:*COPYRIGHT=0;38;2;102;102;102:*README.md=0;38;2;0;0;0;48;2;237;147;102:*configure=0;38;2;154;232;69:*.gitconfig=0;38;2;154;232;69:*.gitignore=0;38;2;154;232;69:*.localized=0;38;2;170;170;170:*.scons_opt=0;38;2;170;170;170:*CODEOWNERS=0;38;2;154;232;69:*Dockerfile=0;38;2;237;147;102:*INSTALL.md=0;38;2;0;0;0;48;2;237;147;102:*README.txt=0;38;2;0;0;0;48;2;237;147;102:*SConscript=0;38;2;154;232;69:*SConstruct=0;38;2;154;232;69:*.gitmodules=0;38;2;154;232;69:*.synctex.gz=0;38;2;170;170;170:*.travis.yml=0;38;2;49;136;102:*INSTALL.txt=0;38;2;0;0;0;48;2;237;147;102:*LICENSE-MIT=0;38;2;102;102;102:*MANIFEST.in=0;38;2;154;232;69:*Makefile.am=0;38;2;154;232;69:*Makefile.in=0;38;2;170;170;170:*.applescript=0;38;2;49;136;102:*.fdb_latexmk=0;38;2;170;170;170:*CONTRIBUTORS=0;38;2;0;0;0;48;2;237;147;102:*appveyor.yml=0;38;2;49;136;102:*configure.ac=0;38;2;154;232;69:*.clang-format=0;38;2;154;232;69:*.gitattributes=0;38;2;154;232;69:*.gitlab-ci.yml=0;38;2;49;136;102:*CMakeCache.txt=0;38;2;170;170;170:*CMakeLists.txt=0;38;2;154;232;69:*LICENSE-APACHE=0;38;2;102;102;102:*CONTRIBUTORS.md=0;38;2;0;0;0;48;2;237;147;102:*.sconsign.dblite=0;38;2;170;170;170:*CONTRIBUTORS.txt=0;38;2;0;0;0;48;2;237;147;102:*requirements.txt=0;38;2;154;232;69:*package-lock.json=0;38;2;170;170;170:*.CFUserTextEncoding=0;38;2;170;170;170"

def --env add-created-path-dir [
    dir: string,
    enabled: bool = true,  # whether to add the directory to the PATH
]: nothing -> nothing {
    if $enabled {
        mkdir $dir
        path add $dir
    }
}

def --env set-var-or-default [
    name: string,  # the name of the environment variable
    default_path: string,  # the default path to use if not set
]: nothing -> nothing {
    let path = ($env | get --ignore-errors $name | default $default_path)
    load-env {
        $name: $path
    }
}

# set-var-or-default XDG_CACHE_HOME ($nu.home-path | path join ".cache")
# set-var-or-default XDG_CONFIG_HOME ($nu.home-path | path join ".config")
# set-var-or-default XDG_DATA_HOME ($nu.home-path | path join ".local" "share")
# set-var-or-default XDG_STATE_HOME ($nu.home-path | path join ".local" "state")

add-created-path-dir ($nu.home-path | path join ".local" "bin")
add-created-path-dir ($nu.home-path | path join ".local" "share" "bin")
add-created-path-dir ($nu.home-path | path join "bin")
# cargo
# scoop
# pnpm
# deno
# bun


# prepend and append a delimiter to the input
# def surround [
#     delim: string, # delimiter to surround the input with
# ]: string -> string {
#     $delim + $in + $delim
# }

# if (is-installed-warn fzf) {
#     # use es (Everything CLI) on Windows, which is way faster than default 
#     #`find` for NTFS drives. note that es requires Everything to be running.
#     let has_es = ($nu.os-info.name) == "windows" and (is-installed-warn es)

#     if $has_es {
#         # mimic default FZF behavior by filtering results to those under cwd.
#         # fzf inspects this variable to know how to populate the results list.
#         $env.FZF_DEFAULT_COMMAND = "es -path ."
#     }

#     # helper to build the command line edit command string for fzf. note that
#     # we're not actually running a command, just building its string, because
#     # keybindings run them at keypress time.
#     def build-cmd-line-edit [
#         has_es: bool,
#         root: bool,
#     ]: nothing -> string {
#         # start with commandline edit prefix
#         mut line = "commandline edit --insert ("

#         if $root {
#             if $has_es {
#                 # no es cwd filter
#                 $line = $line + "FZF_DEFAULT_COMMAND=es fzf"
#             } else {
#                 # set to system root
#                 $line = $line + "fzf --walker-root=/"
#             }
#         } else {
#             # otherwise, just use fzf as is
#             # if we have es, we've already set FZF_DEFAULT_COMMAND, and if not,
#             # walker-root is cwd by default
#             $line = $line + "fzf"
#         }

#         # - layout reverse looks better to me
#         # - backtick-quote the result for paths with spaces
#         # - close subcommand parentheses
#         $line = $line + " --layout=reverse | if ($in | str length) > 0 { $in | surround '`' } )"
#         $line
#     }

#     $env.config = ($env.config | default [] keybindings)
#     $env.config = (
#         $env.config | upsert keybindings (
#             $env.config.keybindings
#             | append [
#                 # Ctrl-T to insert a fzf result (filtered to cwd) into the line 
#                 # editor
#                 {
#                     name: fzf_insert_cwd
#                     modifier: control
#                     keycode: char_t
#                     mode: [emacs vi_normal vi_insert]
#                     event: {
#                         send: executehostcommand
#                         cmd: (build-cmd-line-edit false $has_es)
#                     }
#                 }

#                 # Ctrl-Y to insert a fzf result (all files) into the line editor
#                 {
#                     name: fzf_insert_root
#                     modifier: control
#                     keycode: char_y
#                     mode: [emacs vi_normal vi_insert]
#                     event: {
#                         send: executehostcommand
#                         cmd: (build-cmd-line-edit true $has_es)
#                     }
#                 }
#             ]
#         )
#     )
# }

# generated scripts
# source starship_init.nu
# source atuin_init.nu
# source zoxide_init.nu
# source carapace_init.nu

# do this again, just in case the above scripts have added new paths
# clean_path

mkdir ($nu.data-dir | path join "vendor/autoload")
starship init nu | save -f ($nu.data-dir | path join "vendor/autoload/starship.nu")