# Nushell Config File

use lib/colors.nu tw
use lib/colors.nu gruvbox
use lib/tim_theme.nu
use std *


alias cz = chezmoi
alias less = bat
# bat is smart about styling/paging when in a non-interactive tty, such as when piping
alias cat = bat


$env.NU_LIB_DIRS = [
  $nu.default-config-dir | path join "lib"
]
$env.config.buffer_editor = "code"
$env.EDITOR = "code"
$env.VISUAL = "code"
$env.PAGER = "bat"
$env.MANPAGER = r#'sh -c 'sed -u -e "s/\x1B\[[0-9;]*m//g; s/.\x08//g" | bat -p -lman''#
$env.config.highlight_resolved_externals = true

def --env add-path-if-exists [
  dir: string,
]: nothing -> nothing {
  if ($dir | path exists) {
    path add $dir
  }
}

def 'is-installed' [ app: string ] {
  (which $app | length) > 0
}

def 'on-windows' []: nothing -> bool {
  version | get build_os | str starts-with "windows"
}

def 'quote-path' []: string -> string {
  if ($in | str index-of ' ') == -1 {
    $in
  } else {
    $"`($in)`"
  }
}

add-path-if-exists ($nu.home-path | path join ".local/bin")
add-path-if-exists ($nu.home-path | path join ".local/share/bin")
add-path-if-exists ($nu.home-path | path join "bin")
add-path-if-exists ($nu.home-path | path join ".cargo/bin")
add-path-if-exists ($nu.home-path | path join "scoop/shims")
add-path-if-exists (($env | get --optional LOCALAPPDATA | default "/not-windows") | path join "Programs/oh-my-posh/bin")
add-path-if-exists ($nu.home-path | path join ".deno/bin")

let pnpm_home_path = ($nu.home-path | path join ".local/share/pnpm")
if ($pnpm_home_path | path exists) {
    $env.PNPM_HOME = $pnpm_home_path
    path add $env.PNPM_HOME
}

let bun_install_path = ($nu.home-path | path join ".bun")
if ($bun_install_path | path exists) {
    $env.BUN_INSTALL = $bun_install_path
    path add ($env.BUN_INSTALL | path join "bin")
}

let local_vendor_autoload_path = ($nu.data-dir | path join "vendor" "autoload")
mkdir $local_vendor_autoload_path

# LS_COLORS of the [gruvbox](https://github.com/morhetz/gruvbox/tree/master)
# theme generated by [vivid](https://github.com/sharkdp/vivid)
# nushell will use these when displaying paths in lists and tables
# we do this after setting up paths so that the `vivid` command is available
$env.LS_COLORS = ^vivid generate gruvbox-dark

# atuin, a shell history manager
# https://atuin.sh/
atuin init nu | save --force ($local_vendor_autoload_path | path join "atuin.nu")

# zoxide, a smart cd command
# https://zoxide.dev/
# we tell zoxide to work on the `cd` command, overriding the default. thusly,
# to use zoxide in interactive mode, use `cdi`
zoxide init nushell --cmd cd | save --force ($local_vendor_autoload_path | path join "zoxide.nu")

# carapace, a shell completion
# https://carapace.sh/
$env.CARAPACE_BRIDGES = 'zsh,fish,bash,inshellisense'
# NOTE: we don't use the default carapace init because:
# - we it doesn't allow selective completion based on command
# - it can throw these "ERR unknown shorthand flag" errors
# carapace _carapace nushell | save --force ($local_vendor_autoload_path | path join "carapace.nu")

# from https://www.nushell.sh/cookbook/external_completers.html
# let fish_completer = ...
let carapace_completer = {|spans: list<string>|
  carapace $spans.0 nushell ...$spans
  | from json
  | if ($in | default [] | where value =~ 'ERR$' | is-empty) { $in } else { null }
}

let external_completer = {|spans|
  let expanded_alias = scope aliases
  | where name == $spans.0
  | get --optional 0.expansion

  let spans = if $expanded_alias != null {
    $spans
    | skip 1
    | prepend ($expanded_alias | split row ' ' | take 1)
  } else {
    $spans
  }

  match $spans.0 {
    # use different completers for different commands
    # for example:
    # nu => $fish_completer
    # git => $fish_completer
    # asdf => $fish_completer

    # default to carapace
    _ => $carapace_completer
  } | do $in $spans
}

# fzf
# https://github.com/junegunn/fzf
#
# this fzf config calls out to a few other programs, which we expect to be
# installed from our chezmoi scripts:
#
# - fd, a cross-platform file finder, which we use to find files and directories
# - es, a windows file finder, which is significantly faster than fd because it 
#   reads from the NTFS MFT (it is slower to start up, though)
# - tree, from rust crate `rust_tree`, which we use to preview directory
#   structure
# - bat, a cat replacement with syntax highlighting, which we use to preview
#   files
#
# Nushell reference: https://github.com/junegunn/fzf/issues/4122#issuecomment-2607368316

$env.FZF_DEFAULT_OPTS = "--style full"

# fzf keybindings
$env.KB_FZF_CD_CWD_COMMAND = "fd --type directory --hidden"
$env.KB_FZF_CD_ALL_COMMAND = if (on-windows) { 
  "es folder:" # directories only
} else {
  "fd --type directory --hidden . /"
}
$env.KB_FZF_CD_OPTS = "--preview 'tree --color --classify --level 3 {} | head -n 200'"
$env.KB_FZF_FIND_FILES_CWD_COMMAND = "fd --type file --hidden"
$env.KB_FZF_FIND_FILES_ALL_COMMAND = if (on-windows) { 
  "es"
} else {
  "fd --hidden . /"
}
$env.KB_FZF_FIND_FILES_OPTS = "--preview 'bat --color=always --style=full --line-range=:500 {}' "
$env.KB_FZF_DEFAULT_OPTS = "--scheme=path"

# cd to directories under current directory
const fzf_cd_cwd_keybinding = {
  name: fzf_dirs
  modifier: alt
  keycode: char_c
  mode: [emacs, vi_normal, vi_insert]
  event: [
    {
      send: executehostcommand
      cmd: "
        let fzf_cd_cwd_command = \$\"($env.KB_FZF_CD_CWD_COMMAND) | fzf ($env.KB_FZF_DEFAULT_OPTS) ($env.KB_FZF_CD_OPTS)\";
        let result = nu -c $fzf_cd_cwd_command;
        cd $result;
      "
    }
  ]
}

# cd to directories anywhere
const fzf_cd_all_keybinding = {
  name: fzf_dirs
  modifier: alt
  keycode: char_v
  mode: [emacs, vi_normal, vi_insert]
  event: [
    {
      send: executehostcommand
      cmd: "
        let fzf_cd_all_command = \$\"($env.KB_FZF_CD_ALL_COMMAND) | fzf ($env.KB_FZF_DEFAULT_OPTS) ($env.KB_FZF_CD_OPTS)\";
        let result = nu -c $fzf_cd_all_command;
        cd $result;
      "
    }
  ]
}

# insert files from under current directory
const fzf_find_files_cwd_keybinding =  {
  name: fzf_files
  modifier: alt
  keycode: char_n
  mode: [emacs, vi_normal, vi_insert]
  event: [
    {
      send: executehostcommand
      cmd: '
        let fzf_find_files_cwd_command = $"($env.KB_FZF_FIND_FILES_CWD_COMMAND) | fzf ($env.KB_FZF_DEFAULT_OPTS) ($env.KB_FZF_FIND_FILES_OPTS)";
        let result = nu -l -i -c $fzf_find_files_cwd_command;
        commandline edit --append ($result | quote-path);
        commandline set-cursor --end
      '
    }
  ]
}

# insert files anywhere
const fzf_find_files_all_keybinding =  {
  name: fzf_files
  modifier: alt
  keycode: char_m
  mode: [emacs, vi_normal, vi_insert]
  event: [
    {
      send: executehostcommand
      cmd: "
        let fzf_find_files_all_command = \$\"($env.KB_FZF_FIND_FILES_ALL_COMMAND) | fzf ($env.KB_FZF_DEFAULT_OPTS) ($env.KB_FZF_FIND_FILES_OPTS)\";
        let result = nu -l -i -c $fzf_find_files_all_command;
        commandline edit --append ($result | quote-path);
        commandline set-cursor --end
      "
    }
  ]
}


# Remind keybindings when starting Nushell
if $env.SHLVL == 1 {
  def key [name] { $"(ansi green_bold)($name)(ansi reset)" }
  def from [name] { $"\((ansi purple_italic)($name)(ansi reset)\)" }

  print $"Some keybindings. Turn this message off when you know them!
  
  (key "Ctrl+R") or (key "Up") to search command history (from atuin)
  (key "Alt+C") to change directory to a directory under the current directory (from fzf)
  (key "Alt+V") to change directory to a directory anywhere (from fzf)
  (key "Alt+N") to insert a file from the current directory (from fzf)
  (key "Alt+M") to insert a file from anywhere (from fzf)
  "
}

$env.config = {
  show_banner: false
  edit_mode: vi
  completions: {
    external: {
      enable: true
      completer: $external_completer
    }
  }
  keybindings: [
    $fzf_cd_cwd_keybinding
    $fzf_cd_all_keybinding
    $fzf_find_files_cwd_keybinding
    $fzf_find_files_all_keybinding
    {
      name: exit_vi_insert_mode
      modifier: control
      keycode: "char_["
      mode: [vi_insert]
      event: [
       { send: Esc }
      ]
    }
  ]
  color_config: (tim_theme)
}

# here, we create our own oh-my-posh block. we can't do this in omp directly
# because i don't think nushell exposes it. its also "interactive"
$env.PROMPT_INDICATOR_VI_INSERT = [
  $"(ansi {fg: (gruvbox bright_green)})(ansi reset)"
  $"(ansi {bg: (gruvbox bright_green) fg: (gruvbox bg0)}) 󰏫 (ansi reset)"
  $"(ansi {fg: (gruvbox bright_green)})(ansi reset) "
] | str join
$env.PROMPT_INDICATOR_VI_NORMAL = [
  $"(ansi {fg: (gruvbox fg2)})(ansi reset)"
  $"(ansi {bg: (gruvbox fg2) fg: (gruvbox bg0)}) 󰆾 (ansi reset)"
  $"(ansi {fg: (gruvbox fg2)})(ansi reset) "
] | str join
# this is supposed to be done last (might not matter)
oh-my-posh init nu --config $"($nu.home-path | path join ".config/oh-my-posh.yaml")"
