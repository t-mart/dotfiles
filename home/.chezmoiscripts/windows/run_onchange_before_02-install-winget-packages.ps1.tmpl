# Reload Path to ensure winget is available in the current session
$env:Path = @(
    [System.Environment]::GetEnvironmentVariable('Path', 'Machine')
    [System.Environment]::GetEnvironmentVariable('Path', 'User')
) -join ';'

# update winget itself
winget upgrade --id Microsoft.AppInstaller --exact --accept-source-agreements --accept-package-agreements

# Create a temporary file to store the export data.
$TempFile = New-TemporaryFile
$TempFilePath = $TempFile.FullName

winget export --output $TempFilePath --source winget --ignore-warnings

# Read the JSON file and extract all PackageIdentifier properties.
$installedData = Get-Content -Path $TempFilePath | ConvertFrom-Json
$installedPackageIds = [System.Collections.Generic.HashSet[string]]::new()


# The JSON has structure: Sources -> Packages -> PackageIdentifier
if ($installedData.Sources) {
    foreach ($source in $installedData.Sources) {
        foreach ($package in $source.Packages) {
            [void]$installedPackageIds.Add($package.PackageIdentifier)
        }
    }
}

{{- $packages := joinPath .chezmoi.sourceDir ".data/packages.yaml" | include | fromYaml -}}

{{- range $packages -}}
    {{- if hasKey . "winget" }}
        {{- $id := "" -}}
        {{- $elevate := false -}}
        {{- $interactive := false -}}
        {{- if kindIs "map" .winget -}}
            {{- $id = .winget.id -}}
            {{- if and (hasKey .winget "elevate") .winget.elevate }}
                {{ $elevate = true }}
            {{ end -}}
            {{- if and (hasKey .winget "interactive") .winget.interactive }}
                {{ $interactive = true }}
            {{ end -}}
        {{- else -}}
            {{- $id = .winget -}}
        {{- end }}

if ($installedPackageIds.Contains("{{ $id }}")) {
    Write-Host "Package '{{ $id }}' is already installed. Skipping installation." -ForegroundColor Yellow
} else {
    Write-Host "Installing package '{{ $id }}'..."
    {{ if $elevate }}sudo {{ end }}winget install --id '{{ $id }}' --exact --accept-package-agreements --accept-source-agreements{{ if $interactive }} --interactive{{ end }}
}
Write-Host ""

    {{- end -}}
{{- end }}

# Clean up the temporary file
if ($tempFilePath -and (Test-Path $tempFilePath)) {
    Remove-Item -Path $tempFilePath -Force
}