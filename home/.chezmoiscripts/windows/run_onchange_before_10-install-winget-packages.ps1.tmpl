# Reload Path to ensure winget is available in the current session
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

# Verify that winget is installed before proceeding
if (-not (Get-Command winget -ErrorAction SilentlyContinue)) {
    Write-Error "winget.exe does not appear to be installed or is not in the PATH."
    return
}

# The Go template below will generate a series of installation commands.
{{- $packages := joinPath .chezmoi.sourceDir ".data/packages.yaml" | include | fromYaml -}}
{{- range $packages }}
{{- if hasKey . "winget" }}
{{- /* Normalize the winget config and set variables */ -}}
{{- $wingetId := "" -}}
{{- $isElevated := false -}}
{{- $isInteractive := false -}}
{{- if kindIs "map" .winget -}}
    {{- $wingetId = .winget.id -}}
    {{- if and (hasKey .winget "elevate") .winget.elevate }}{{ $isElevated = true }}{{ end -}}
    {{- if and (hasKey .winget "interactive") .winget.interactive }}{{ $isInteractive = true }}{{ end -}}
{{- else -}}
    {{- $wingetId = .winget -}}
{{- end -}}

# --- Installing '{{ .name }}' ---
try {
    {{ if $isElevated }}sudo {{ end }}winget install --id '{{ $wingetId }}' --exact --accept-package-agreements --accept-source-agreements{{ if $isInteractive }} --interactive{{ end }}
}
catch {
    Write-Error "Failed to install '{{ $wingetId }}'. Error: $_"
}
Write-Host ""
{{- end -}}
{{- end }}
