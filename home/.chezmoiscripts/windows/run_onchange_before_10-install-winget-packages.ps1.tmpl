# Reload Path to ensure winget is available in the current session
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

# Verify that winget is installed before proceeding
if (-not (Get-Command winget -ErrorAction SilentlyContinue)) {
    Write-Error "winget.exe does not appear to be installed or is not in the PATH."
    return
}

# The Go template below will generate a series of installation commands.
{{- $packages := joinPath .chezmoi.sourceDir ".data/packages.yaml" | include | fromYaml -}}
{{- range $packages }}
{{- if hasKey . "winget" }}
{{- /* Create a dictionary to hold variables */ -}}
{{- $vars := dict "id" "" "isElevated" false "isInteractive" false -}}

{{- /* Normalize the winget config by updating the dictionary */ -}}
{{- if kindIs "map" .winget -}}
    {{- $_ := set $vars "id" .winget.id -}}
    {{- if and (hasKey .winget "elevate") .winget.elevate }}{{ $_ := set $vars "isElevated" true }}{{ end -}}
    {{- if and (hasKey .winget "interactive") .winget.interactive }}{{ $_ := set $vars "isInteractive" true }}{{ end -}}
{{- else -}}
    {{- $_ := set $vars "id" .winget -}}
{{- end -}}

{{ if $vars.isElevated }}sudo {{ end }}winget install --id '{{ $vars.id }}' --exact --accept-package-agreements --accept-source-agreements{{ if $vars.isInteractive }} --interactive{{ end }}

Write-Host ""
{{ end -}}
{{- end }}