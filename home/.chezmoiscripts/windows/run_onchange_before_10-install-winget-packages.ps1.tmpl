# Reload Path to ensure winget is available in the current session
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

# update winget itself
winget upgrade --id Microsoft.AppInstaller --exact --accept-source-agreements --accept-package-agreements

# Create a temporary file to store the export data.
$TempFile = New-TemporaryFile
$TempFilePath = $TempFile.FullName

winget export --output $TempFilePath --source winget --ignore-warnings

# Read the JSON file and extract all PackageIdentifier properties.
$installedData = Get-Content -Path $TempFilePath | ConvertFrom-Json
$installedPackageIds = [System.Collections.Generic.HashSet[string]]::new()


# The JSON has structure: Sources -> Packages -> PackageIdentifier
if ($installedData.Sources) {
    foreach ($source in $installedData.Sources) {
        foreach ($package in $source.Packages) {
            [void]$installedPackageIds.Add($package.PackageIdentifier)
        }
    }
}

{{- $packages := joinPath .chezmoi.sourceDir ".data/packages.yaml" | include | fromYaml -}}
{{- range $packages }}
{{- if hasKey . "winget" }}
{{- /* Create a dictionary to hold variables */ -}}
{{- $vars := dict "id" "" "isElevated" false "isInteractive" false -}}

{{- /* Normalize the winget config by updating the dictionary */ -}}
{{- if kindIs "map" .winget -}}
    {{- $_ := set $vars "id" .winget.id -}}
    {{- if and (hasKey .winget "elevate") .winget.elevate }}{{ $_ := set $vars "isElevated" true }}{{ end -}}
    {{- if and (hasKey .winget "interactive") .winget.interactive }}{{ $_ := set $vars "isInteractive" true }}{{ end -}}
{{- else -}}
    {{- $_ := set $vars "id" .winget -}}
{{- end -}}

if ($installedPackageIds.Contains("{{ $vars.id }}")) {
    Write-Host "Package '{{ $vars.id }}' is already installed. Skipping installation." -ForegroundColor Yellow
} else {
    Write-Host "Installing package '{{ $vars.id }}'..."
    {{ if $vars.isElevated }}sudo {{ end }}winget install --id '{{ $vars.id }}' --exact --accept-package-agreements --accept-source-agreements{{ if $vars.isInteractive }} --interactive{{ end }}
}

Write-Host ""
{{ end -}}
{{- end }}

# Clean up the temporary file
if ($tempFilePath -and (Test-Path $tempFilePath)) {
    Remove-Item -Path $tempFilePath -Force
}