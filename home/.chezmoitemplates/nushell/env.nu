# Nushell Environment Config File

# use nu standard library
use std *

# XDG env vars
# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
{
    XDG_CACHE_HOME: ($nu.home-path | path join ".cache"),
    XDG_CONFIG_HOME: ($nu.home-path | path join ".config"),
    XDG_DATA_HOME: ($nu.home-path | path join ".local" "share"),
    XDG_STATE_HOME: ($nu.home-path | path join ".local" "state"),
} | items { |name, path|
    # use the existing path if it's already set
    let path = ($env | get --ignore-errors $name | default $path)
    mkdir $path
    {
        name: $name,
        path: $path
    }
} | transpose --ignore-titles -d -r | load-env

# Add .local/bin (according to XDG spec)
export-env {
    let local_bin = ($nu.home-path | path join ".local" "bin")
    mkdir $local_bin  # ensure exists, and no-op if already exists
    path add $local_bin
}

# Add ~/bin if exists for local installs of built software
if ("~/bin" | path exists) {
    path add "~/bin"
}

# Return true if the tool named `name` is installed on the system.
def is-installed [
    name: string,  # the name of the tool
]: nothing -> bool {
    (which $name | length) > 0
}

## cargo ##
# Cargo is rust's package manager.
if ("~/.cargo" | path exists) {
    path add "~/.cargo/bin"
}

alias code = code-insiders

# Expand (to absolute paths) and dedupe and expand the OS's path variable
def --env clean_path []: nothing -> nothing {
    let path_name = if "PATH" in $env { "PATH" } else { "Path" }
    load-env {
        $path_name: (
        $env
            | get $path_name
            | split row (char esep)
            | filter { path exists }
            | path expand --no-symlink
            | uniq
        )
    }
}

# Specifies how environment variables are:
# - converted from a string to a value on Nushell startup (from_string)
# - converted from a value back to a string when running external commands
#   (to_string)
# Note: The conversions happen *after* config.nu is loaded
$env.ENV_CONVERSIONS = {
    "PATH": {
        from_string: { |s|
            $s | split row (char esep) | path expand --no-symlink
        }
        to_string: { |v|
            $v | path expand --no-symlink | str join (char esep)
        }
    }
    "Path": {
        from_string: { |s|
            $s | split row (char esep) | path expand --no-symlink
        }
        to_string: { |v| 
            $v | path expand --no-symlink | str join (char esep)
        }
    }
}

# A place to put scripts generated by tools
$env.GENERATED_SCRIPTS_DIR = (
    $nu.default-config-dir | path join 'scripts_generated'
)
mkdir $env.GENERATED_SCRIPTS_DIR

# Directories to search for scripts when calling source or use
$env.NU_LIB_DIRS = [
    # source-controlled scripts
    ($nu.default-config-dir | path join 'scripts')

    # tool-generated scripts
    $env.GENERATED_SCRIPTS_DIR
]

# Directories to search for plugin binaries when calling register
# The default for this is $nu.default-config-dir/plugins
$env.NU_PLUGIN_DIRS = [
    ($nu.default-config-dir | path join 'plugins')
]

$env.config.buffer_editor = "code-insiders"
$env.EDITOR = "code-insiders"
$env.VISUAL = "code-insiders"

# LS_COLORS of the [ayu](https://github.com/ayu-theme) theme
#
# Generated by [vivid](https://github.com/sharkdp/vivid) with command:
#   vivid generate ayu
#
# While this command could be run at each startup, hard-coding it here
# removes a dependency, especially on something that is unlikely to change.
$env.LS_COLORS = "*~=0;38;2;170;170;170:bd=0;38;2;0;0;0;48;2;237;102;106:ca=0:cd=0;38;2;0;0;0;48;2;134;179;0:di=0;38;2;27;125;196:do=0;38;2;0;0;0;48;2;240;113;113:ex=1;38;2;237;102;106:fi=0:ln=0;38;2;240;113;113:mh=0:mi=0;38;2;0;0;0;48;2;237;102;106:no=0:or=0;38;2;0;0;0;48;2;237;102;106:ow=0:pi=0;38;2;0;0;0;48;2;27;125;196:rs=0:sg=0:so=0;38;2;0;0;0;48;2;240;113;113:st=0:su=0:tw=0:*.a=1;38;2;237;102;106:*.c=0;38;2;49;136;102:*.d=0;38;2;49;136;102:*.h=0;38;2;49;136;102:*.m=0;38;2;49;136;102:*.o=0;38;2;170;170;170:*.p=0;38;2;49;136;102:*.r=0;38;2;49;136;102:*.t=0;38;2;49;136;102:*.z=4;38;2;134;179;0:*.7z=4;38;2;134;179;0:*.as=0;38;2;49;136;102:*.bc=0;38;2;170;170;170:*.bz=4;38;2;134;179;0:*.cc=0;38;2;49;136;102:*.cp=0;38;2;49;136;102:*.cr=0;38;2;49;136;102:*.cs=0;38;2;49;136;102:*.di=0;38;2;49;136;102:*.el=0;38;2;49;136;102:*.ex=0;38;2;49;136;102:*.fs=0;38;2;49;136;102:*.go=0;38;2;49;136;102:*.gv=0;38;2;49;136;102:*.gz=4;38;2;134;179;0:*.hh=0;38;2;49;136;102:*.hi=0;38;2;170;170;170:*.hs=0;38;2;49;136;102:*.jl=0;38;2;49;136;102:*.js=0;38;2;49;136;102:*.ko=1;38;2;237;102;106:*.kt=0;38;2;49;136;102:*.la=0;38;2;170;170;170:*.ll=0;38;2;49;136;102:*.lo=0;38;2;170;170;170:*.md=0;38;2;237;147;102:*.ml=0;38;2;49;136;102:*.mn=0;38;2;49;136;102:*.nb=0;38;2;49;136;102:*.pl=0;38;2;49;136;102:*.pm=0;38;2;49;136;102:*.pp=0;38;2;49;136;102:*.ps=0;38;2;237;102;106:*.py=0;38;2;49;136;102:*.rb=0;38;2;49;136;102:*.rm=0;38;2;240;113;113:*.rs=0;38;2;49;136;102:*.sh=0;38;2;49;136;102:*.so=1;38;2;237;102;106:*.td=0;38;2;49;136;102:*.ts=0;38;2;49;136;102:*.ui=0;38;2;237;147;102:*.vb=0;38;2;49;136;102:*.wv=0;38;2;240;113;113:*.xz=4;38;2;134;179;0:*.aif=0;38;2;240;113;113:*.ape=0;38;2;240;113;113:*.apk=4;38;2;134;179;0:*.arj=4;38;2;134;179;0:*.asa=0;38;2;49;136;102:*.aux=0;38;2;170;170;170:*.avi=0;38;2;240;113;113:*.awk=0;38;2;49;136;102:*.bag=4;38;2;134;179;0:*.bak=0;38;2;170;170;170:*.bat=1;38;2;237;102;106:*.bbl=0;38;2;170;170;170:*.bcf=0;38;2;170;170;170:*.bib=0;38;2;237;147;102:*.bin=4;38;2;134;179;0:*.blg=0;38;2;170;170;170:*.bmp=0;38;2;240;113;113:*.bsh=0;38;2;49;136;102:*.bst=0;38;2;237;147;102:*.bz2=4;38;2;134;179;0:*.c++=0;38;2;49;136;102:*.cfg=0;38;2;237;147;102:*.cgi=0;38;2;49;136;102:*.clj=0;38;2;49;136;102:*.com=1;38;2;237;102;106:*.cpp=0;38;2;49;136;102:*.css=0;38;2;49;136;102:*.csv=0;38;2;237;147;102:*.csx=0;38;2;49;136;102:*.cxx=0;38;2;49;136;102:*.deb=4;38;2;134;179;0:*.def=0;38;2;49;136;102:*.dll=1;38;2;237;102;106:*.dmg=4;38;2;134;179;0:*.doc=0;38;2;237;102;106:*.dot=0;38;2;49;136;102:*.dox=0;38;2;154;232;69:*.dpr=0;38;2;49;136;102:*.elc=0;38;2;49;136;102:*.elm=0;38;2;49;136;102:*.epp=0;38;2;49;136;102:*.eps=0;38;2;240;113;113:*.erl=0;38;2;49;136;102:*.exe=1;38;2;237;102;106:*.exs=0;38;2;49;136;102:*.fls=0;38;2;170;170;170:*.flv=0;38;2;240;113;113:*.fnt=0;38;2;240;113;113:*.fon=0;38;2;240;113;113:*.fsi=0;38;2;49;136;102:*.fsx=0;38;2;49;136;102:*.gif=0;38;2;240;113;113:*.git=0;38;2;170;170;170:*.gvy=0;38;2;49;136;102:*.h++=0;38;2;49;136;102:*.hpp=0;38;2;49;136;102:*.htc=0;38;2;49;136;102:*.htm=0;38;2;237;147;102:*.hxx=0;38;2;49;136;102:*.ico=0;38;2;240;113;113:*.ics=0;38;2;237;102;106:*.idx=0;38;2;170;170;170:*.ilg=0;38;2;170;170;170:*.img=4;38;2;134;179;0:*.inc=0;38;2;49;136;102:*.ind=0;38;2;170;170;170:*.ini=0;38;2;237;147;102:*.inl=0;38;2;49;136;102:*.ipp=0;38;2;49;136;102:*.iso=4;38;2;134;179;0:*.jar=4;38;2;134;179;0:*.jpg=0;38;2;240;113;113:*.kex=0;38;2;237;102;106:*.kts=0;38;2;49;136;102:*.log=0;38;2;170;170;170:*.ltx=0;38;2;49;136;102:*.lua=0;38;2;49;136;102:*.m3u=0;38;2;240;113;113:*.m4a=0;38;2;240;113;113:*.m4v=0;38;2;240;113;113:*.mid=0;38;2;240;113;113:*.mir=0;38;2;49;136;102:*.mkv=0;38;2;240;113;113:*.mli=0;38;2;49;136;102:*.mov=0;38;2;240;113;113:*.mp3=0;38;2;240;113;113:*.mp4=0;38;2;240;113;113:*.mpg=0;38;2;240;113;113:*.nix=0;38;2;237;147;102:*.odp=0;38;2;237;102;106:*.ods=0;38;2;237;102;106:*.odt=0;38;2;237;102;106:*.ogg=0;38;2;240;113;113:*.org=0;38;2;237;147;102:*.otf=0;38;2;240;113;113:*.out=0;38;2;170;170;170:*.pas=0;38;2;49;136;102:*.pbm=0;38;2;240;113;113:*.pdf=0;38;2;237;102;106:*.pgm=0;38;2;240;113;113:*.php=0;38;2;49;136;102:*.pid=0;38;2;170;170;170:*.pkg=4;38;2;134;179;0:*.png=0;38;2;240;113;113:*.pod=0;38;2;49;136;102:*.ppm=0;38;2;240;113;113:*.pps=0;38;2;237;102;106:*.ppt=0;38;2;237;102;106:*.pro=0;38;2;154;232;69:*.ps1=0;38;2;49;136;102:*.psd=0;38;2;240;113;113:*.pyc=0;38;2;170;170;170:*.pyd=0;38;2;170;170;170:*.pyo=0;38;2;170;170;170:*.rar=4;38;2;134;179;0:*.rpm=4;38;2;134;179;0:*.rst=0;38;2;237;147;102:*.rtf=0;38;2;237;102;106:*.sbt=0;38;2;49;136;102:*.sql=0;38;2;49;136;102:*.sty=0;38;2;170;170;170:*.svg=0;38;2;240;113;113:*.swf=0;38;2;240;113;113:*.swp=0;38;2;170;170;170:*.sxi=0;38;2;237;102;106:*.sxw=0;38;2;237;102;106:*.tar=4;38;2;134;179;0:*.tbz=4;38;2;134;179;0:*.tcl=0;38;2;49;136;102:*.tex=0;38;2;49;136;102:*.tgz=4;38;2;134;179;0:*.tif=0;38;2;240;113;113:*.tml=0;38;2;237;147;102:*.tmp=0;38;2;170;170;170:*.toc=0;38;2;170;170;170:*.tsx=0;38;2;49;136;102:*.ttf=0;38;2;240;113;113:*.txt=0;38;2;237;147;102:*.vcd=4;38;2;134;179;0:*.vim=0;38;2;49;136;102:*.vob=0;38;2;240;113;113:*.wav=0;38;2;240;113;113:*.wma=0;38;2;240;113;113:*.wmv=0;38;2;240;113;113:*.xcf=0;38;2;240;113;113:*.xlr=0;38;2;237;102;106:*.xls=0;38;2;237;102;106:*.xml=0;38;2;237;147;102:*.xmp=0;38;2;237;147;102:*.yml=0;38;2;237;147;102:*.zip=4;38;2;134;179;0:*.zsh=0;38;2;49;136;102:*.zst=4;38;2;134;179;0:*TODO=1:*hgrc=0;38;2;154;232;69:*.bash=0;38;2;49;136;102:*.conf=0;38;2;237;147;102:*.dart=0;38;2;49;136;102:*.diff=0;38;2;49;136;102:*.docx=0;38;2;237;102;106:*.epub=0;38;2;237;102;106:*.fish=0;38;2;49;136;102:*.flac=0;38;2;240;113;113:*.h264=0;38;2;240;113;113:*.hgrc=0;38;2;154;232;69:*.html=0;38;2;237;147;102:*.java=0;38;2;49;136;102:*.jpeg=0;38;2;240;113;113:*.json=0;38;2;237;147;102:*.less=0;38;2;49;136;102:*.lisp=0;38;2;49;136;102:*.lock=0;38;2;170;170;170:*.make=0;38;2;154;232;69:*.mpeg=0;38;2;240;113;113:*.opus=0;38;2;240;113;113:*.orig=0;38;2;170;170;170:*.pptx=0;38;2;237;102;106:*.psd1=0;38;2;49;136;102:*.psm1=0;38;2;49;136;102:*.purs=0;38;2;49;136;102:*.rlib=0;38;2;170;170;170:*.sass=0;38;2;49;136;102:*.scss=0;38;2;49;136;102:*.tbz2=4;38;2;134;179;0:*.tiff=0;38;2;240;113;113:*.toml=0;38;2;237;147;102:*.webm=0;38;2;240;113;113:*.webp=0;38;2;240;113;113:*.woff=0;38;2;240;113;113:*.xbps=4;38;2;134;179;0:*.xlsx=0;38;2;237;102;106:*.yaml=0;38;2;237;147;102:*.cabal=0;38;2;49;136;102:*.cache=0;38;2;170;170;170:*.class=0;38;2;170;170;170:*.cmake=0;38;2;154;232;69:*.dyn_o=0;38;2;170;170;170:*.ipynb=0;38;2;49;136;102:*.mdown=0;38;2;237;147;102:*.patch=0;38;2;49;136;102:*.scala=0;38;2;49;136;102:*.shtml=0;38;2;237;147;102:*.swift=0;38;2;49;136;102:*.toast=4;38;2;134;179;0:*.xhtml=0;38;2;237;147;102:*README=0;38;2;0;0;0;48;2;237;147;102:*passwd=0;38;2;237;147;102:*shadow=0;38;2;237;147;102:*.config=0;38;2;237;147;102:*.dyn_hi=0;38;2;170;170;170:*.flake8=0;38;2;154;232;69:*.gradle=0;38;2;49;136;102:*.groovy=0;38;2;49;136;102:*.ignore=0;38;2;154;232;69:*.matlab=0;38;2;49;136;102:*COPYING=0;38;2;102;102;102:*INSTALL=0;38;2;0;0;0;48;2;237;147;102:*LICENSE=0;38;2;102;102;102:*TODO.md=1:*.desktop=0;38;2;237;147;102:*.gemspec=0;38;2;154;232;69:*Doxyfile=0;38;2;154;232;69:*Makefile=0;38;2;154;232;69:*TODO.txt=1:*setup.py=0;38;2;154;232;69:*.DS_Store=0;38;2;170;170;170:*.cmake.in=0;38;2;154;232;69:*.fdignore=0;38;2;154;232;69:*.kdevelop=0;38;2;154;232;69:*.markdown=0;38;2;237;147;102:*.rgignore=0;38;2;154;232;69:*COPYRIGHT=0;38;2;102;102;102:*README.md=0;38;2;0;0;0;48;2;237;147;102:*configure=0;38;2;154;232;69:*.gitconfig=0;38;2;154;232;69:*.gitignore=0;38;2;154;232;69:*.localized=0;38;2;170;170;170:*.scons_opt=0;38;2;170;170;170:*CODEOWNERS=0;38;2;154;232;69:*Dockerfile=0;38;2;237;147;102:*INSTALL.md=0;38;2;0;0;0;48;2;237;147;102:*README.txt=0;38;2;0;0;0;48;2;237;147;102:*SConscript=0;38;2;154;232;69:*SConstruct=0;38;2;154;232;69:*.gitmodules=0;38;2;154;232;69:*.synctex.gz=0;38;2;170;170;170:*.travis.yml=0;38;2;49;136;102:*INSTALL.txt=0;38;2;0;0;0;48;2;237;147;102:*LICENSE-MIT=0;38;2;102;102;102:*MANIFEST.in=0;38;2;154;232;69:*Makefile.am=0;38;2;154;232;69:*Makefile.in=0;38;2;170;170;170:*.applescript=0;38;2;49;136;102:*.fdb_latexmk=0;38;2;170;170;170:*CONTRIBUTORS=0;38;2;0;0;0;48;2;237;147;102:*appveyor.yml=0;38;2;49;136;102:*configure.ac=0;38;2;154;232;69:*.clang-format=0;38;2;154;232;69:*.gitattributes=0;38;2;154;232;69:*.gitlab-ci.yml=0;38;2;49;136;102:*CMakeCache.txt=0;38;2;170;170;170:*CMakeLists.txt=0;38;2;154;232;69:*LICENSE-APACHE=0;38;2;102;102;102:*CONTRIBUTORS.md=0;38;2;0;0;0;48;2;237;147;102:*.sconsign.dblite=0;38;2;170;170;170:*CONTRIBUTORS.txt=0;38;2;0;0;0;48;2;237;147;102:*requirements.txt=0;38;2;154;232;69:*package-lock.json=0;38;2;170;170;170:*.CFUserTextEncoding=0;38;2;170;170;170"


# Put scoop shims at the front of the $env.Path (on Windows). This specifically
# allows us to prefer these shim executables over Windows-built-in executables,
# like curl.
if ($nu.os-info.name) == "windows" {
    let scoop_shims = ("~/scoop/shims" | path expand)
    # only if it's in the path already
    if $scoop_shims in ($env.Path | split row (char esep) | path expand) {
        # this will prepend it, making it appear twice (and we will dedupe at
        # end of file)
        path add $scoop_shims
    }
}

# Like `is-installed`, but also prints a warning if the tool is not installed at
# a frequency of at most once a day.
def is-installed-warn [
    name: string,  # the name of the tool
]: nothing -> bool {
    let warn_path = ($env.XDG_CACHE_HOME | path join $"nu_warn_($name)")
    if (is-installed $name) {
        rm --force $warn_path  # remove dangling warning file
        true
    } else {
        # show a warning at most once a day if a tool is not installed.
        let doesnt_exist = not ($warn_path | path exists)
        let too_old = {|p| (date now) - (ls $p).modified.0 > 1day}
        if $doesnt_exist or (do $too_old $warn_path) {
            $"The nushell config wants to use `($name)`, but is not installed" |
                print

            "Marker file, can be deleted.\n" | save --force $warn_path
        }
        false
    }
}

# Initialize a tool named `name`, or more specifically, iff `name` is present on
# the system, load the environment variables in `env_record` and save the output
# of the `init_cmd` to file in `$env.GENERATED_SCRIPTS_DIR` / `<name>_init.nu` 
# (to be sourced later in config.nu).
#
# This command uses `which` on `$name` to check if the tool is installed. 
# Therefore, it must be present in your PATH variable.
#
# Of particular note, `env_record` is applied *before* `init_cmd` is run. This
# can be helpful if `init_cmd` behaves differently based on environment
# variables.
def --env init-tool [
    name: string,             # the name of the tool (will be checked with
                              # `which`)
    init_cmd: closure,        # the command to run to initialize the tool iff
                              # the tool is installed
    env_record: record = {},  # An optional record of environment variables to 
                              # set iff the tool is installed
]: nothing -> nothing {

    if (is-installed-warn $name) {
        # first load environment
        $env_record | load-env

        # then pipe forward init command output
        do $init_cmd
    } else {
        # placeholder contents, so that the `source` command doesn't fail in
        # config.nu
        $"# Placeholder for the not-yet-installed `($name)` init script\n"
    } | save -f ($env.GENERATED_SCRIPTS_DIR | path join $"($name)_init.nu")
}

## starship ##
# The minimal, blazing-fast, and infinitely customizable prompt for any shell!
# https://starship.rs/
init-tool starship {
    starship init nu
} {
    # these characters show up in certain modes. note: some complex codepoints
    # (non-ascii) render with wrong spacing in vscode terminal. try to keep
    # simple.
    PROMPT_INDICATOR_VI_INSERT: $'(ansi green_bold)+(ansi reset) '
    PROMPT_INDICATOR_VI_NORMAL: $'(ansi yellow_bold)Δ(ansi reset) '
    PROMPT_MULTILINE_INDICATOR: $'(ansi grey)↵(ansi reset) '
}

## atuin ##
# Atuin replaces your existing shell history with a SQLite database
#
# https://docs.atuin.sh/
#
# Press Ctrl-R to bring up interactive history search. Type query and/or
# navigate with arrow keys or Ctrl-P/Ctrl-N.
init-tool atuin {
    # --disable-up-arrow: disable up arrow key to navigate history, but retain
    # Ctrl-R.
    atuin init nu --disable-up-arrow
}

## zoxide ##
# zoxide is a smarter cd command, inspired by z and autojump
#
# https://github.com/ajeetdsouza/zoxide
#
# Use `cd` (a rebinding of the zoxide's default `z` command) to navigate to
# directories.
# Use `cdi` (ditto, but for `zi`) to bring up a menu. Use arrow keys or
# Ctrl-P/Ctrl-N to navigate.
init-tool zoxide {
    mkdir $env._ZO_DATA_DIR
    zoxide init nushell --cmd cd
} {
    _ZO_DATA_DIR: ($env.XDG_DATA_HOME | path join "zoxide")
}

## carapace ##
# Carapace-bin provides argument completion for multiple CLI commands
#
# https://github.com/carapace-sh/carapace-bin
#
# Press tab to get completions after typing a command
init-tool carapace {
    carapace _carapace nushell
} {
    # use completions from other shells
    CARAPACE_BRIDGES: 'zsh,fish,bash,inshellisense'

    # don't leak carapace's get-env, set-env and unset-env functions
    CARAPACE_ENV: 0
}

# do this last to ensure its effects
clean_path
